// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package schema

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(name, password, email)
VALUES
($1, $2, $3)
RETURNING id, name, email, password
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userEmailExists = `-- name: UserEmailExists :one

SELECT EXISTS (SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) UserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userNameExists = `-- name: UserNameExists :one
SELECT EXISTS (SELECT 1 FROM users WHERE name = $1)
`

func (q *Queries) UserNameExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, userNameExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
